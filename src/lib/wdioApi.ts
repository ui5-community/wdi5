const wdioApi = [
    "$",
    "$$",
    "acceptAlert",
    "addCommand",
    "addCookie",
    "addCredential",
    "addListener",
    "addValue",
    "addVirtualAuthenticator",
    "back",
    "call",
    "clearValue",
    "click",
    "closeWindow",
    "createMockSensor",
    "createWindow",
    "custom$",
    "custom$$",
    "debug",
    "deleteAllCookies",
    "deleteCookie",
    "deleteCookies",
    "deleteMockSensor",
    "deleteNetworkConditions",
    "deleteSession",
    "dismissAlert",
    "doubleClick",
    "dragAndDrop",
    "elementClear",
    "elementClick",
    "elementHover",
    "elementSendKeys",
    "emit",
    "eventNames",
    "execute",
    "executeAsync",
    "executeAsyncScript",
    "executeScript",
    "file",
    "findElement",
    "findElementFromElement",
    "findElementFromShadowRoot",
    "findElements",
    "findElementsFromElement",
    "findElementsFromShadowRoot",
    "forward",
    "freeze",
    "fullscreenWindow",
    "generateTestReport",
    "getActiveElement",
    "getAlertText",
    "getAllCookies",
    "getAttribute",
    "getCSSProperty",
    "getCastIssueMessage",
    "getCastSinks",
    "getComputedLabel",
    "getComputedRole",
    "getCookies",
    "getCredentials",
    "getElementAttribute",
    "getElementCSSValue",
    "getElementComputedLabel",
    "getElementComputedRole",
    "getElementProperty",
    "getElementRect",
    "getElementShadowRoot",
    "getElementTagName",
    "getElementText",
    "getElementValue",
    "getHTML",
    "getLocation",
    "getLogTypes",
    "getLogs",
    "getMaxListeners",
    "getMockSensor",
    "getNamedCookie",
    "getNetworkConditions",
    "getNetworkConnection",
    "getPageSource",
    "getProperty",
    "getPuppeteer",
    "getSize",
    "getTagName",
    "getText",
    "getTimeouts",
    "getTitle",
    "getUrl",
    "getValue",
    "getWindowHandle",
    "getWindowHandles",
    "getWindowRect",
    "getWindowSize",
    "hasOwnProperty",
    "isAlertOpen",
    "isAutoReporting",
    "isClickable",
    "isDisplayed",
    "isDisplayedInViewport",
    "isElementDisplayed",
    "isElementEnabled",
    "isElementSelected",
    "isEnabled",
    "isEqual",
    "isExisting",
    "isFocused",
    "isLoading",
    "isPrototypeOf",
    "isSelected",
    "keys",
    "launchChromeApp",
    "listenerCount",
    "listeners",
    "maximizeWindow",
    "minimizeWindow",
    "mock",
    "mockClearAll",
    "mockRestoreAll",
    "moveTo",
    "navigateTo",
    "newSession",
    "newWindow",
    "nextElement",
    "off",
    "on",
    "once",
    "overwriteCommand",
    "parentElement",
    "pause",
    "performActions",
    "prependListener",
    "prependOnceListener",
    "previousElement",
    "printPage",
    "propertyIsEnumerable",
    "rawListeners",
    "react$",
    "react$$",
    "refresh",
    "releaseActions",
    "reloadSession",
    "removeAllCredentials",
    "removeAllListeners",
    "removeCredential",
    "removeListener",
    "removeVirtualAuthenticator",
    "resume",
    "savePDF",
    "saveRecordingScreen",
    "saveScreenshot",
    "scrollIntoView",
    "selectByAttribute",
    "selectByIndex",
    "selectByVisibleText",
    "selectCastSink",
    "sendAlertText",
    "sendCommand",
    "sendCommandAndGetResult",
    "setAutoReporting",
    "setCookies",
    "setMaxListeners",
    "setNetworkConditions",
    "setNetworkConnection",
    "setPermissions",
    "setTimeZone",
    "setTimeout",
    "setTimeouts",
    "setUserVerified",
    "setValue",
    "setWindowRect",
    "setWindowSize",
    "shadow$",
    "shadow$$",
    "shutdown",
    "startCastTabMirroring",
    "status",
    "stopCasting",
    "switchToFrame",
    "switchToParentFrame",
    "switchToWindow",
    "switchWindow",
    "takeElementScreenshot",
    "takeHeapSnapshot",
    "takeScreenshot",
    "throttle",
    "toLocaleString",
    "toString",
    "touchAction",
    "touchPinch",
    "updateMockSensor",
    "uploadFile",
    "url",
    "valueOf",
    "waitForClickable",
    "waitForDisplayed",
    "waitForEnabled",
    "waitForExist",
    "waitUntil"
]

export { wdioApi as wdioApi }
